 ------
 Weave Binaries with AspectJ Aspects after APT Processing
 ------
 Yegor Bugayenko
 ------
 2013-04-04
 ------

~~
~~ #set($sign="$")
~~ Copyright (c) 2012-2025 Yegor Bugayenko
~~ All rights reserved.
~~
~~ Redistribution and use in source and binary forms, with or without
~~ modification, are permitted provided that the following conditions
~~ are met: 1) Redistributions of source code must retain the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer. 2) Redistributions in binary form must reproduce the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer in the documentation and/or other materials provided
~~ with the distribution. 3) Neither the name of the jcabi.com nor
~~ the names of its contributors may be used to endorse or promote
~~ products derived from this software without specific prior written
~~ permission.
~~
~~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
~~ "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
~~ NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
~~ FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
~~ THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
~~ INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
~~ (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
~~ SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
~~ HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
~~ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
~~ ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
~~ OF THE POSSIBILITY OF SUCH DAMAGE.
~~

Weave Binaries with AspectJ Aspects after APT Processing

  This goal weaves Java <<<.class>>> binary files with AspectJ aspects.
  Comparing to AspectJ compiling of <<<.java>>> files, this approach
  guarantees that APT processor modifications stay untouched. To use the
  plugin add this configuration to your <<<pom.xml>>>:

+--
<project>
  <build>
    <plugins>
      <plugin>
        <groupId>com.jcabi</groupId>
        <artifactId>jcabi-maven-plugin</artifactId>
        <version>${project.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>ajc</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
+--

  The plugin will find all AspectJ aspects available in the project compile
  classpath and plugin class and weave <<<.class>>> files using them. By default,
  the plugin finds binary <<<.class>>> files in <<<target/classes>>> and replaces
  them with woven versions. It is possible to change the location of them
  using <<<classesDirectory>>> parameter. For example, if you need to
  weave test classes:

+--
<execution>
  <configuration>
    <classesDirectory>target/test-classes</classesDirectory>
  </configuration>
  [...]
</execution>
+--

  It is also possible to tell the plugin to use additional not yet compiled
  AspectJ aspects in source <<<.java>>> or <<<.aj>>> format. Add the list
  of directories where these aspects are located to the plugin configuration:

+--
<execution>
  <configuration>
    <aspectsDirectories>
      <directory>src/main/aspect</directory>
    </aspectsDirectories>
  </configuration>
  [...]
</execution>
+--

  Another alternative is {{{http://mojo.codehaus.org/aspectj-maven-plugin/}<<<aspectj-maven-plugin>>>}},
  but it can't weave binaries,
  as {{{http://stackoverflow.com/questions/3660547/apt-and-aop-in-the-same-project-using-maven}explained here}}.

* Cutting Edge Version

  If you want to use current version of the plugin, you can do it with
  this configuration in your <<<pom.xml>>>:

+--
<pluginRepositories>
  <pluginRepository>
    <id>oss.sonatype.org</id>
    <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
  </pluginRepository>
</pluginRepositories>
<project>
  <build>
    <plugins>
      <plugin>
        <groupId>com.jcabi</groupId>
        <artifactId>jcabi-maven-plugin</artifactId>
        <version>1.0-SNAPSHOT</version>
        [...]
      </plugin>
    </plugins>
  </build>
</project>
+--
